const u=u=>({value:1-u,mul:l=>({value:(1-u)*l}),add:l=>({value:1-u+l}),sub:l=>({value:1-u-l}),div:l=>({value:(1-u)/l})}),l=(u,l,a)=>({value:u?l:a,mul:e=>({value:(u?l:a)*e}),add:e=>({value:(u?l:a)+e}),sub:e=>({value:(u?l:a)-e}),div:e=>({value:(u?l:a)/e})}),a=(u,l=1)=>{const a=(12.9898*(u.x*l)+78.233*(u.y*l)+37.719*(u.z||0))%1,e=2*Math.abs(Math.sin(3.14159*a))-1;return{value:e,mul:u=>({value:e*u}),add:u=>({value:e+u}),sub:u=>({value:e-u}),div:u=>({value:e/u})}},e=(u,l=1,a=.8)=>({input:u,intensity:l,threshold:a,value:u*l,mul:a=>({value:u*l*a}),add:a=>({value:u*l+a}),sub:a=>({value:u*l-a}),div:a=>({value:u*l/a})}),v={bloom:e,mx_cell_noise_float:a,oneMinus:u,select:l};export{v as MissingImportsBundle,e as bloom,v as default,a as mx_cell_noise_float,u as oneMinus,l as select};
